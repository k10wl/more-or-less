import React from "react";import food from "./foodList";import Welcome from "./Welcome";import Quiz from "./Quiz";import FinalScore from "./FinalScore";class DataProcessing extends React.Component{  constructor(props) {    super(props);    this.state = {      startQuiz: false,      showStartButton: false,      endQuiz: false,      randomName: '',      name: '',      cal: '',      url: '',      lName: '',      lCal: '',      lUrl: '',      rName: '',      rCal: '',      rUrl: '',      resultLCal: '',      resultLName: '',      resultLUrl: '',      resultRCal: '',      resultRName: '',      resultRUrl: '',      checkAnswer: undefined,      toggleShowCalories: false,      scoreCount: 0    }  }  fetch = () => new Promise(resolve => resolve(this.fetchData()))  set = () => new Promise(resolve => resolve(this.setData()))  swap = () => new Promise(resolve => resolve(this.swapData()))  clear = () => new Promise(resolve => resolve(this.clearData()))  toggle = () => new Promise(resolve => resolve(this.toggleShowCalories()))  componentDidMount() {    setTimeout(() =>      this.fetch().then(        () => this.set().then(          () => this.swap().then(            () => this.fetch().then(              () => this.set().then(                () => this.setState({showStartButton: true})              )            )          )        )      ), 1)  }  startButton = () => {    this.setState({      startQuiz: true,      showStartButton: false    })    if(this.state.endQuiz === true){      this.setState({        endQuiz: false,        scoreCount: 0      })    }  }  fetchData = async () => {    this.setState({name: food[Math.floor(Math.random() * food.length)]})    if (this.state.rName === this.state.name || this.state.lName === this.state.name){      this.setState({name: food[Math.floor(Math.random() * food.length)]})    }    try{      let fetchCal = await fetch("https://api.calorieninjas.com/v1/nutrition?query=" + this.state.name, {          "method": "GET",          "headers": {            "X-Api-Key": "fARZNg6Fh3ZgRQb9FDOHLQ==lgctnPlBREcnNuz6"          }})      let setCal = await fetchCal.json()      this.setState({cal: setCal.items[0].calories})      let fetchImg = await fetch("https://contextualwebsearch-websearch-v1.p.rapidapi.com/api/Search/" +        "ImageSearchAPI?q=" + this.state.name + "&20raw&pageNumber=1&pageSize=" + 3 + "&autoCorrect=false", {        "method": "GET",        "headers": {          "x-rapidapi-key": "2bf5045036mshe5e1d40a76a12bep10b722jsna8964c2e470f",          "x-rapidapi-host": "contextualwebsearch-websearch-v1.p.rapidapi.com"        }      })      let jsonImg = await fetchImg.json()      let filter = await jsonImg.value.reduce((x, y) => ((x.height > y.height) && x.height < 1000) ? x : y)      this.setState({url: filter.url})    }    catch (error) {      console.log(error)    }  }  setData = () => {    this.setState({      rName: this.state.name,      rCal: this.state.cal,      rUrl: this.state.url    })  }  swapData = () => {    this.setState({      lName: this.state.rName,      lCal: this.state.rCal,      lUrl: this.state.rUrl    })  };  clearData = () =>{    this.setState({      name: null,      cal: null,      url: null    })  }  checkIfMore = () => this.state.rCal >= this.state.lCal ? this.rightAnswer() : this.wrongAnswer()  checkIfLess = () => this.state.rCal <= this.state.lCal ? this.rightAnswer() : this.wrongAnswer()  toggleShowCalories = () => {    const show = () => new Promise(resolve => resolve(        this.setState({          resultRCal: this.state.rCal,          resultRName: this.state.rName,          resultRUrl: this.state.rUrl,          resultLCal: this.state.lCal,          resultLName: this.state.lName,          resultLUrl: this.state.lUrl,          toggleShowCalories: true        })    ))    const hide = () => new Promise(resolve => resolve(      setTimeout(() =>        this.setState({          toggleShowCalories:false,          checkAnswer: undefined        }), 3001)    ))    show().then(      () => hide().then()    )  }  rightAnswer = () => {    this.setState({checkAnswer: true})    const updateCount = () => new Promise(resolve => resolve(      this.setState(prevState => ({scoreCount: prevState.scoreCount + 1}))    ))    this.toggle().then(      () => updateCount().then(        () => this.fetch().then(          () => this.swap().then(            () => this.set().then()          )        )      )    )  }  wrongAnswer = () => {    this.setState({checkAnswer: false})    this.toggle().then(      () => setTimeout(() => this.setState({endQuiz: true}), 3000)    )    this.fetch().then(      () => this.set().then(        () => this.swap().then(          () => this.fetch().then(            () => this.set().then(              () => this.setState({showStartButton: true})            )          )        )      )    )  }  render() {    return (      <div>        {this.state.startQuiz === false ?          <Welcome data={this.state} startButton = {this.startButton}/> : null        }        {this.state.endQuiz === false && this.state.startQuiz ?          <Quiz data = {this.state} checkIfMore={this.checkIfMore} checkIfLess={this.checkIfLess}/> :          <FinalScore data = {this.state} startButton = {this.startButton}/>        }      </div>    )  }}export default DataProcessing